package Sumer;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

class Student {
    private String name;
    public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getRollNumber() {
		return rollNumber;
	}

	public void setRollNumber(int rollNumber) {
		this.rollNumber = rollNumber;
	}

	public String getGrade() {
		return grade;
	}

	public void setGrade(String grade) {
		this.grade = grade;
	}

	private int rollNumber;
    private String grade;
    // Include any other relevant attributes

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    // Include getters and setters for attributes

    @Override
    public String toString() {
        return "Name: " + name + ", Roll Number: " + rollNumber + ", Grade: " + grade;
    }
}

class StudentManagementSystem {
    private List<Student> students;

    public StudentManagementSystem() {
        students = new ArrayList<>();
        readStudentDataFromFile(); // Read student data from file during system initialization
    }

    public void addStudent(Student student) {
        students.add(student);
        writeStudentDataToFile(); // Write student data to file after adding a student
        System.out.println("Student added successfully.");
    }

    public void removeStudent(int rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                students.remove(student);
                writeStudentDataToFile(); // Write student data to file after removing a student
                System.out.println("Student removed successfully.");
                return;
            }
        }
        System.out.println("Student with the given roll number not found.");
    }

    public void searchStudent(int rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                System.out.println("Student found:");
                System.out.println(student);
                return;
            }
        }
        System.out.println("Student with the given roll number not found.");
    }

    public void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            System.out.println("List of all students:");
            for (Student student : students) {
                System.out.println(student);
            }
        }
    }

    private void readStudentDataFromFile() {
        try {
            File file = new File("studentData.txt");
            if (file.exists()) {
                Scanner scanner = new Scanner(file);
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] data = line.split(",");
                    String name = data[0];
                    int rollNumber = Integer.parseInt(data[1]);
                    String grade = data[2];
                    Student student = new Student(name, rollNumber, grade);
                    students.add(student);
                }
                scanner.close();
            }
        } catch (IOException e) {
            System.out.println("Error occurred while reading student data from file.");
        }
    }

    private void writeStudentDataToFile() {
        try {
            FileWriter writer = new FileWriter("studentData.txt");
            for (Student student : students) {
                writer.write(student.getName() + "," + student.getRollNumber() + "," + student.getGrade() + "\n");
            }
            writer.close();
        } catch (IOException e) {
            System.out.println("Error occurred while writing student data to file.");
        }
    }
}

public class StudentManagementSystemConsoleUI {
    private static StudentManagementSystem studentManagementSystem;
    private static Scanner scanner;

    public static void main(String[] args) {
        studentManagementSystem = new StudentManagementSystem();
        scanner = new Scanner(System.in);

        displayMenu();
        int choice = getChoice();

        while (choice != 6) {
            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    removeStudent();
                    break;
                case 3:
                    searchStudent();
                    break;
                case 4:
                    displayAllStudents();
                    break;
                case 5:
                    System.out.println("Exiting the application.");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
            displayMenu();
            choice = getChoice();
        }

        scanner.close();
    }

    private static void displayMenu() {
        System.out.println("---- Student Management System ----");
        System.out.println("1. Add a student");
        System.out.println("2. Remove a student");
        System.out.println("3. Search for a student");
        System.out.println("4. Display all students");
        System.out.println("5. Exit");
        System.out.println("Enter your choice:");
    }

    private static int getChoice() {
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        return choice;
    }

    private static void addStudent() {
        System.out.println("Enter student details:");
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("Roll Number: ");
        int rollNumber = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        System.out.print("Grade: ");
        String grade = scanner.nextLine();

        Student student = new Student(name, rollNumber, grade);
        studentManagementSystem.addStudent(student);
    }

    private static void removeStudent() {
        System.out.print("Enter the roll number of the student to remove: ");
        int rollNumber = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        studentManagementSystem.removeStudent(rollNumber);
    }

    private static void searchStudent() {
        System.out.print("Enter the roll number of the student to search: ");
        int rollNumber = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        studentManagementSystem.searchStudent(rollNumber);
    }

    private static void displayAllStudents() {
        studentManagementSystem.displayAllStudents();
    }
}

